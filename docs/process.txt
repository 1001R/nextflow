########
Process
########

In the a Nextflow script the `process` in the basic processing `primitive` to execute a user provided script.

The process definition starts with keyword ``process`` to which follows the process name and the process body
delimited by curly brackets. The process ``body`` must contain a string which represents the command or, more generally,
a script that is executed by it. A basic process looks like the following example::

  process sayHello {

      "echo 'Hello world!' > file"

  }


More in details a process may contains four compartments defining the directives, inputs, outputs and finally
the process scripts following the syntax showed below:

::

  process < name > {

     [ directives ]

     input:
      < process input files >

     output:
      < process output files >


     < user script to be executed >

  }


Directives
==========

In the `directive` compartment can be specified configuration options which will affect the execution of the current
process. They have the following syntax::

    name value [, value2 [,..]]

Below are listed directives that can be applied to any process.


cacheable
---------

Whenever the process outputs have to caches across multiple pipeline executions. It is ``true`` by default, set to ``false``
to disable caching feature for this process. For example::

  process noCacheThis {

    cache false

    """
    command not to be cached
    """
  }


echo
-----

Whenever print out the process standard output the current execution console. It is ``false`` by default, set to ``true``
if you need to show the process output.


errorStrategy
--------------

The ``errorStrategy`` directive defines how an error condition is managed by the process. By default when an error status
is returned by the execute script, the process stops immediately that in turns forces cause the entire pipeline to stops.

When using the directive ``errorStrategy 'ignore'`` the process do not stop on error condition and it just reports a message
to notify the error event.

For example::

    process ignoreAnyError {
      errorStrategy 'ignore'

      "command to be executed"
    }

.. note:: By definition a command script is failing when it terminates with a non-zero exit status. To change this behavior
  see `validExitStatus`_.


executor
--------

The ``executor`` directive allows to specify the underlying system on which the process is actually executed. The following
values can be used:

- ``local``: The process is executed in the local computer where `Nextflow` is launched.

- ``sge``: the process is executed using a Sun Grid Engine / `Open Grid Engine <http://gridscheduler.sourceforge.net/>`_.

- ```lsf```: The process is executed via the `Platform LSF <http://en.wikipedia.org/wiki/Platform_LSF>`_ job scheduler.

- ``slurm``: The process is executed via the SLURM job scheduler.

- ``dnanexus``: The process is executed by submitting it to a `DNAnexus <http://www.dnanexus.com/>`_ cloud.



validExitStatus
-------------------

 (default: ``0`)


..
    clusterOptions
    ---------------

    queue
    -----

    (sge,lsf)

    maxDuration
    ------------
    (sge,slurm)

    maxMemory
    ---------
    (sge)


Inputs
======


Outputs
=======



Script
======



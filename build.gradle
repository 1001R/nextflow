/*
 * Copyright (c) 2013, the authors.
 *
 *   This file is part of 'Nextflow'.
 *
 *   Nextflow is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nextflow is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nextflow.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'gradle-one-jar'
version = '0.6.2'

allprojects {
    apply plugin: 'groovy'

    repositories {
        flatDir(dirs: file('lib'))
        mavenCentral()
        maven { url 'http://uk.maven.org/maven2' }
        maven { url 'http://dl.bintray.com/paolo-ditommaso/maven'}
        mavenLocal()
    }

    dependencies {
        compile ("org.codehaus.groovy:groovy:${groovyVer}")
        testCompile ("cglib:cglib-nodep:${cglibVer}")
        testCompile ("org.objenesis:objenesis:${objenesisVer}")
        testCompile ("org.spockframework:spock-core:${spockVer}") {
            exclude module: 'groovy-all'
        }
        //testCompile ('commons-cli:commons-cli:1.2')
    }
}

configurations {
    oneJarLib
    dnanexus.extendsFrom runtime
    gdocLibs.extendsFrom runtime
}


dependencies {

    compile "org.codehaus.gpars:gpars:${gparsVer}"
    compile "org.slf4j:slf4j-api:${slf4jVer}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVer}"
    compile "org.slf4j:jul-to-slf4j:${slf4jVer}"
    compile "org.slf4j:log4j-over-slf4j:${slf4jVer}"
    compile "ch.qos.logback:logback-classic:${logbackVar}"
    compile "ch.qos.logback:logback-core:${logbackVar}"
    compile "commons-lang:commons-lang:${commonsLangVer}"
    compile "commons-io:commons-io:${commonsIoVer}"
    compile "com.beust:jcommander:${jcommanderVer}"
    compile "com.google.code.findbugs:jsr305:${jsr305Ver}"
    compile "com.esotericsoftware.kryo:kryo:${kryoVer}"

    oneJarLib files('one-jar/one-jar-boot-0.97.jar')

    dnanexus (project(':dnanexus')) {
        exclude module: 'nextflow'
    }

    gdocLibs 'org.fusesource.jansi:jansi:1.11'
    gdocLibs "org.codehaus.groovy:groovy-groovydoc:${groovyVer}"
    gdocLibs "org.codehaus.groovy:groovy-ant:${groovyVer}"

}

// patched as described here
// http://forums.gradle.org/gradle/topics/gradle_task_groovydoc_failing_with_noclassdeffounderror
groovydoc {
    groovyClasspath = project.configurations.gdocLibs
}

sourceSets.main.java.srcDirs = [] 
sourceSets.main.groovy.srcDirs = ['src/main/java', 'src/main/groovy']

compileGroovy {
    options.compilerArgs = ['-XDignore.symbol.file']
}

subprojects {
    apply plugin: 'groovy'

    sourceSets {
        main {
            groovy { srcDirs = ['src/main'] }
            resources { srcDirs = ['src/resources'] }
        }

        test {
            groovy { srcDirs = ['src/test'] }
        }
    }

}

/*
 * print out the runtime classpath
 */
task classpathRuntime(dependsOn: configurations.runtime) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}

/*
 * print out the compile classpath
 */
task classpathCompile(dependsOn: configurations.compile) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}


/*
 * Update the build timestamp in the source source file
 */
task buildInfo << {

    def file = new File('./src/main/groovy/nextflow/Const.groovy')
    def buildNum = 0
    def src = file.text
    src.find(/APP_BUILDNUM *= *([0-9]*)/) { buildNum = it[1]?.toInteger()+1 }
    src = src.replaceAll('APP_VER *= *"[0-9\\.]+"', "APP_VER = \"${version}\"" as String)
    src = src.replaceAll('APP_TIMESTAMP *= *[0-9]*', "APP_TIMESTAMP = ${System.currentTimeMillis()}" as String)
    if( buildNum ) {
        src = src.replaceAll('APP_BUILDNUM *= *[0-9]*', "APP_BUILDNUM = ${buildNum}" as String)
    }
    else {
        println "WARN: Unable to find current build number"
    }
    file.text = src
}

/*
 * Compile sources and copies all libs to target directory
 */
task compile(type: Copy) {
    dependsOn buildInfo, compileJava, compileGroovy, processResources

    into "$buildDir/dependency-libs"
    from configurations.runtime
}


/*
 * Create the distribution stage folder i.e. creates a folder containing everything
 * have to be included in the distribution package
 */

task stage( type: Copy ) {
    dependsOn jar, javadoc, groovydoc

    // clean the target directory before create
    def target = file("$buildDir/stage/nextflow-$version")
    target.parentFile.deleteDir()
    target.mkdirs()

    destinationDir target

    // copy the launch script
    into('.') {
        from ('./nextflow.sh') // { exclude 'nextflow' }
        //rename { String fileName -> fileName.replace('nextflow.sh', 'nextflow') }
    }

    // copy application - and - runtime dependencies jars
    into('libs') {
        from "$buildDir/libs/nextflow-${version}.jar"
        from configurations.runtime
    }

    // still some stuff
    into('src') { from './src/main' }
    into('docs') { from '$buildDir/docs/groovydoc/'}

}

/*
 * Creates the Zip distribution file
 */
task distZip(type: Zip) {
    dependsOn stage
    from "$buildDir/stage/"
}

/*
 * creates the Tar distribution file
 */
task distTar(type: Tar) {
    dependsOn stage
    compression = Compression.GZIP
    from "$buildDir/stage/"
}


task dist() {
    dependsOn distZip, distTar
}

/*
 * Print the distribution file name when distXxx task completes
 */
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task == distTar && !state.failure) { println "\n** TAR: ${relativePath(distTar.archivePath)}\n\n"}
    if (task == distZip && !state.failure) { println "\n** ZIP: ${relativePath(distZip.archivePath)}\n\n"}
}


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 */

task onejar(type: OneJar) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    oneJarConfiguration = configurations.oneJarLib

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including DnaNexus stuff
 */
task dxjar(type: OneJar, dependsOn: configurations.dnanexus ) {
    mainClass = 'nextflow.script.CliRunner'
    manifest {
        attributes 'One-Jar-URL-Factory': 'com.simontuffs.onejar.JarClassLoader$OneJarURLFactory'
        attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
    }
    useStable = false
    oneJarConfiguration = configurations.oneJarLib
    targetConfiguration = configurations.dnanexus

    doFirst { def path=new File("$buildDir/one-jar-build"); if(path.exists()) path.deleteDir() }
}


/*
 * Create a self-contained executable package
 */

def oneJarShellStub = "./one-jar/launcher.stub"
def oneJarTempPath = "$buildDir/libs/nextflow-${version}-standalone.jar"
def oneJarDistPath = "$buildDir/pack/nextflow"

task pack(dependsOn: onejar) << {

    /*
     * Create the bash startup file
     */
    def distFile = new File(oneJarDistPath).absoluteFile
    if( !distFile.getParentFile().exists() ) { distFile.getParentFile().mkdirs()  }
    if( distFile.exists() ) distFile.delete()

    def out = new FileOutputStream(oneJarDistPath);
    out << new FileInputStream(oneJarShellStub)
    out << new FileInputStream(oneJarTempPath)

    "chmod +x ${distFile}".execute()

    // copy also the plain jar
    ant.echo( "Nextflow executable created. Launch with: '$oneJarDistPath'" )
    ant.echo( "Done" );

}

/*
 * Create the dnanexus application archive and project structure
 */

File dxProject = file('./dx-project')

task dnanexus(dependsOn: dxjar) << {

    def binFolder = new File(dxProject,'resources/usr/bin')
    binFolder.mkdirs()
    def target = new FileOutputStream(new File(binFolder,'nextflow.jar'))
    target << new FileInputStream(new File(oneJarTempPath))

    def dxApp = file('./subprojects/dnanexus/dxapp.json')
    def dxScript = file('./subprojects/dnanexus/dxapp.sh')

    // copy the 'dxapp.json' if not exists
    target = new File(dxProject, dxApp.name)
    if( !target.exists() ) {
        target.text = dxApp.text
    }

    // copy the 'dxapp.sh' if not exists
    target = new File(dxProject, dxScript.name)
    if( !target.exists() ) {
        target.text = dxScript.text
    }

    // copy the example files
    target = new File(dxProject,'resources/examples')
    target.mkdirs()
    def examples = new File('./examples')
    examples.eachFile {
        def copy = new File(target, it.name)
        if( it.isFile() && !copy.exists() ) copy.text = it.text
    }

    println """
    DnaNexus project ready
    1. move to ${dxProject}
    2. build it with the command 'dx build -f'
    3. launch it using the command 'dx run nextflow'
    """

}



/*
 * private task - create the executable package and upload it to Dropbox
 */
task uploadOnejar ( type: Copy, dependsOn: pack ) {
    dependsOn pack

    from oneJarDistPath
    into '/Users/pditommaso/Dropbox/Public/nextflow/'

}

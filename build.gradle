/*
 * Copyright (c) 2013-2014, Centre for Genomic Regulation (CRG).
 * Copyright (c) 2013-2014, Paolo Di Tommaso and the respective authors.
 *
 *   This file is part of 'Nextflow'.
 *
 *   Nextflow is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nextflow is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nextflow.  If not, see <http://www.gnu.org/licenses/>.
 */

version = '0.10.0'
apply plugin: 'application'
mainClassName = 'nextflow.cli.Launcher'

if (System.getenv('CI_GROOVY_VERSION')) {
    // Add ability to test with upcoming versions of Groovy
    groovyVer = System.getenv('CI_GROOVY_VERSION')
    if (groovyVer.endsWith('-SNAPSHOT')) {
        allprojects {
            repositories {
                maven {
                    name 'JFrog OSS snapshot repo'
                    url 'https://oss.jfrog.org/oss-snapshot-local/'
                }
            }
        }
    }
    logger.lifecycle "Overriden Groovy dependency to use $groovyVer"
}

ext {
    groovyVersion = '2.3.6'
    slf4jVersion = '1.7.7'
    logbackVersion = '1.1.2'
}

allprojects {
    apply plugin: 'groovy'
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    repositories {
        flatDir(dirs: file('lib'))
        mavenCentral()
        maven { url 'http://uk.maven.org/maven2' }
        maven { url 'http://dl.bintray.com/paolo-ditommaso/maven'}
        maven { url 'https://repo.eclipse.org/content/groups/releases' }
        mavenLocal()
    }

    dependencies {
        compile ("org.codehaus.groovy:groovy:${groovyVersion}")
        compile ("org.codehaus.groovy:groovy-nio:${groovyVersion}")
        testCompile ("cglib:cglib-nodep:2.2")
        testCompile ("org.objenesis:objenesis:1.4")
        testCompile ("org.spockframework:spock-core:0.7-groovy-2.0") {
            exclude module: 'groovy-all'
        }
        testCompile 'com.google.jimfs:jimfs:1.0'
    }

}

configurations {
    capsule
    extrae
    dnanexus.extendsFrom runtime
    gridgain.extendsFrom runtime
    gdocLibs.extendsFrom runtime
}


dependencies {

    compile "org.codehaus.groovy:groovy-json:${groovyVersion}"
    compile "org.slf4j:slf4j-api:${slf4jVersion}"
    compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    compile "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    compile "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "ch.qos.logback:logback-core:${logbackVersion}"
    compile "org.codehaus.gpars:gpars:1.2.1"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-io:commons-io:2.4"
    compile "com.beust:jcommander:1.35"
    compile "com.google.code.findbugs:jsr305:1.3.9"
    compile "com.esotericsoftware.kryo:kryo:2.24.0"
    compile("org.utgenome.thirdparty:picard:1.102.0") {
        transitive = false
    }
    compile 'us.levk:drmaa-gridengine:6.2u5'
    compile("org.eclipse.jgit:org.eclipse.jgit:3.4.1.201406201815-r") {
        exclude module: 'commons-logging'
    }
    compile files('lib/guava-cache-16.0.1.jar')

    // include Ivy at runtime in order to have Grape @Grab work correctly
    runtime "org.apache.ivy:ivy:2.3.0"

    // Capsule manages the fat jar building process
    capsule "co.paralleluniverse:capsule:0.7.0"

    // Extrae tracing sub-module
    extrae (project(':nxf-extrae')) {
        transitive = false
    }

    // DnaNexus build dependencies
    dnanexus (project(':nxf-dnanexus')) {
        exclude module: 'nextflow'
    }

    // GridGain build dependencies
    gridgain (project(':nxf-gridgain')) {
        exclude module: 'nextflow'
    }

    // Documentation required libraries
    gdocLibs 'org.fusesource.jansi:jansi:1.11'
    gdocLibs "org.codehaus.groovy:groovy-groovydoc:${groovyVersion}"
    gdocLibs "org.codehaus.groovy:groovy-ant:${groovyVersion}"

}

// patched as described here
// http://forums.gradle.org/gradle/topics/gradle_task_groovydoc_failing_with_noclassdeffounderror
groovydoc {
    groovyClasspath = project.configurations.gdocLibs
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ['src/main/java', 'src/main/groovy']
sourceSets.main.resources.srcDirs = ['src/main/resources']

compileGroovy {
    options.compilerArgs = ['-XDignore.symbol.file']
}

subprojects {
    apply plugin: 'groovy'

    sourceSets {
        main {
            groovy { srcDirs = ['src/main'] }
            resources { srcDirs = ['src/resources'] }
        }

        test {
            groovy { srcDirs = ['src/test'] }
        }
    }

}


/*
 * Update the build timestamp in the source source file
 */
task buildInfo << {

    def file = new File('./src/main/groovy/nextflow/Const.groovy')
    def buildNum = 0
    def src = file.text
    src.find(/APP_BUILDNUM *= *([0-9]*)/) { buildNum = it[1]?.toInteger()+1 }
    src = src.replaceAll('APP_VER *= *"[0-9a-z_\\-\\.]+"', "APP_VER = \"${version}\"" as String)
    src = src.replaceAll('APP_TIMESTAMP *= *[0-9]*', "APP_TIMESTAMP = ${System.currentTimeMillis()}" as String)
    if( buildNum ) {
        src = src.replaceAll('APP_BUILDNUM *= *[0-9]*', "APP_BUILDNUM = ${buildNum}" as String)
    }
    else {
        println "WARN: Unable to find current build number"
    }
    file.text = src

    // -- update 'nextflow' wrapper
    file = new File('nextflow')
    src = file.text
    src = src.replaceAll(/NXF_VER\=\$\{NXF_VER:-'.*'\}/, 'NXF_VER=\\${NXF_VER:-\'' + version + '\'}')
    file.text = src

    // -- update sphynx
    def major = version.split(/\./)[0..1].join('.')
    file = new File('docs/conf.py')
    src = file.text
    src = src.replaceAll(/version *= *'[0-9a-z_\-\.]+'/, "version = '$major'" as String)
    src = src.replaceAll(/release *= *'[0-9a-z_\-\.]+'/, "release = '$version'" as String)
    file.text = src
}

task makeSha1 << {
    String  str = file('nextflow').text
    def sha1 = java.security.MessageDigest.getInstance("SHA1")
    byte[] digest  = sha1.digest(str.getBytes())
    file('nextflow.sha1').text = new  BigInteger(1, digest).toString(16) + '\n'
}

/*
 * Compile sources and copies all libs to target directory
 */
task compile(type: Copy) {
    dependsOn buildInfo, compileJava, compileGroovy, processResources

    from configurations.gridgain
    from configurations.dnanexus
    into "$buildDir/dependency-libs"
}


/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 *
 * @link https://github.com/puniverse/capsule
 */

def homeDir = System.properties['user.home']
def nextflowDir = "$homeDir/.nextflow/framework/$version"

task pack(type: Jar, dependsOn: jar) {
    archiveName = "nextflow-${version}-one.jar"

    from jar // embed our application jar
    from { configurations.runtime } // embed dependencies
    from { configurations.extrae  } // add the extrae module
    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
                'Main-Class'        : 'Capsule',
                'Application-Name'  : 'nextflow',
                'Application-Class' : mainClassName,
                'Application-Version': version,
                'Min-Java-Version'  : '1.7.0'
        )
    }

    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-one.jar", todir: nextflowDir, overwrite: true)
        println "\n+ Nextflow package copied to: $nextflowDir"
    }
}

/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including DnaNexus stuff
 */
task packDx(type: Jar, dependsOn: configurations.dnanexus ) {
    archiveName = "nextflow-${version}-dx.jar"

    from jar // embed our application jar
    from { configurations.dnanexus } // embed dependencies

    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
                'Main-Class'        : 'Capsule',
                'Application-Name'  : 'nextflow',
                'Application-Class' : mainClassName,
                'Application-Version': version,
                'Min-Java-Version'  : '1.7.0'
        )
    }

    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-dx.jar", todir: nextflowDir, overwrite: true)
        println "\n+ Nextflow DX package copied to: $nextflowDir"
    }
}


/*
 * Creates a self-contained *fat* jar shipping all required dependencies
 * including GridGain stuff
 */
task packGg(type: Jar, dependsOn: configurations.gridgain ) {
    archiveName = "nextflow-${version}-gg.jar"

    from jar // embed our application jar
    from { configurations.gridgain } // embed dependencies
    from { configurations.extrae  } // add the extrae module
    from(configurations.capsule.collect { zipTree(it) }) { include 'Capsule.class' } // we just need the single Capsule class

    manifest {
        attributes(
                'Main-Class'        : 'Capsule',
                'Application-Name'  : 'nextflow',
                'Application-Class' : mainClassName,
                'Application-Version': version,
                'Min-Java-Version'  : '1.7.0'
        )
    }

    doLast {
        ant.copy(file: "$buildDir/libs/nextflow-${version}-gg.jar", todir: nextflowDir, overwrite: true)
        println "\n+ Nextflow GG package copied to: $nextflowDir"
    }
}

/*
 * Compile and pack all packages
 */
task packAll( dependsOn: [pack, packDx, packGg]) {

}


final s3CmdOpts="-q --no-mime-magic --reduced-redundancy --acl-public --access_key=${System.getenv('NXF_AWS_ACCESS')} --secret_key=${System.getenv('NXF_AWS_SECRET')}"

/*
 * Publish 'nextflow' launcher
 */
task publish(type: Exec) {
    def cmd = "s3cmd put nextflow s3://www.nextflow.io/releases/latest/nextflow $s3CmdOpts"
    commandLine 'bash', '-c', cmd
}

/*
 * Tag and upload the release
 */
task release(type: Exec, dependsOn: [ test, packAll, makeSha1 ]) {

    def files = []
    files[0] = file('nextflow').absoluteFile
    files[1] = file('nextflow.sha1').absoluteFile

    ['one','dx','gg'].each{
        files << file("$buildDir/libs/nextflow-${version}-${it}.jar").absoluteFile
    }

    def temp = File.createTempFile('upload',null)
    temp.deleteOnExit()
    temp.text =  """\
    # tag the release
    git push || exit \$?
    (git tag -a v$version -m 'Tagging version $version [release]' -f && git push origin v$version -f) || exit \$?
    github-release release -u nextflow-io -r nextflow -t v$version --pre-release
    github-release upload -u nextflow-io -r nextflow -t v$version --file ${files[0]} --name ${files[0].name}

    # upload assets
    ${ files.collect { "s3cmd put ${it} s3://www.nextflow.io/releases/v${version}/${it.name} ${s3CmdOpts}"}.join('\n') }

    # publish the script as the latest
    s3cmd put ${files[0]} s3://www.nextflow.io/releases/latest/nextflow $s3CmdOpts
    s3cmd put ${files[1]} s3://www.nextflow.io/releases/latest/nextflow.sha1 $s3CmdOpts

    """.stripIndent()

    commandLine 'bash', '-e', temp.absolutePath
}


/*
 * Create the dnanexus application archive and project structure
 */

File dxProject = file('./dx-project')

task dnanexus(dependsOn: packDx) << {

    def binFolder = new File(dxProject,'resources/usr/bin')
    binFolder.mkdirs()
    def target = new File(binFolder,'nextflow.jar')
    ant.copy(file: "$buildDir/libs/nextflow-${version}-dx.jar", tofile: target, overwrite: true)

    def dxApp = file('./subprojects/nxf-dnanexus/dxapp.json')
    def dxScript = file('./subprojects/nxf-dnanexus/dxapp.sh')

    // copy the 'dxapp.json' if not exists
    target = new File(dxProject, dxApp.name)
    if( !target.exists() ) {
        target.text = dxApp.text
    }

    // copy the 'dxapp.sh' if not exists
    target = new File(dxProject, dxScript.name)
    if( !target.exists() ) {
        target.text = dxScript.text
    }

    // copy the example files
    target = new File(dxProject,'resources/examples')
    target.mkdirs()
    def examples = new File('./examples')
    examples.eachFile {
        def copy = new File(target, it.name)
        if( it.isFile() && !copy.exists() ) copy.text = it.text
    }

    println """
    DnaNexus project ready
    1. move to ${dxProject}
    2. build it with the command 'dx build -f'
    3. launch it using the command 'dx run nextflow'
    """

}


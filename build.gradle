/*
 * Copyright (c) 2013, the authors.
 *
 *   This file is part of 'Nextflow'.
 *
 *   Nextflow is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   Nextflow is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with Nextflow.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'groovy'
apply plugin: 'codenarc'
version = '0.4.0'

repositories {
    flatDir(dirs: file('lib'))
    mavenCentral()
    maven { url 'http://uk.maven.org/maven2' }
}

dependencies {

    compile 'org.codehaus.groovy:groovy:2.1.7'
    compile 'org.codehaus.gpars:gpars:1.0.0'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'org.slf4j:jcl-over-slf4j:1.7.5'
    compile 'org.slf4j:jul-to-slf4j:1.7.5'
    compile 'org.slf4j:log4j-over-slf4j:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.0.13'
    compile 'ch.qos.logback:logback-core:1.0.13'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-cli:commons-cli:1.2'
    compile 'com.beust:jcommander:1.30'
    compile 'com.google.code.findbugs:jsr305:2.0.2'

    testCompile ('org.spockframework:spock-core:0.7-groovy-2.0') {
        exclude module: 'groovy-all'
    }
    testCompile ('cglib:cglib-nodep:2.2')

}


/*
 * print out the runtime classpath
 */
task classpathRuntime(dependsOn: configurations.runtime) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}

/*
 * print out the compile classpath
 */
task classpathCompile(dependsOn: configurations.compile) << {

    String home = System.properties['user.home']
    def libs = configurations.compile.collect {File file -> file.absolutePath ?.replace(home,'$HOME')}
    println libs.join(':')

}


/*
 * Update the build timestamp in the source source file
 */
task buildInfo << {

    def file = new File('./src/main/groovy/nextflow/Const.groovy')
    def buildNum = 0
    def src = file.text
    src.find(/APP_BUILDNUM *= *([0-9]*)/) { buildNum = it[1]?.toInteger()+1 }
    src = src.replaceAll('APP_VER *= *"[0-9\\.]+"', "APP_VER = \"${version}\"" as String)
    src = src.replaceAll('APP_TIMESTAMP *= *[0-9]*', "APP_TIMESTAMP = ${System.currentTimeMillis()}" as String)
    if( buildNum ) {
        src = src.replaceAll('APP_BUILDNUM *= *[0-9]*', "APP_BUILDNUM = ${buildNum}" as String)
    }
    else {
        println "WARN: Unable to find current build number"
    }
    file.text = src


}

/*
 * Compile sources and copies all libs to target directory
 */
task compile(type: Copy) {
    dependsOn buildInfo, compileJava, compileGroovy, processResources

    into "$buildDir/dependency-libs"
    from configurations.runtime
}


/*
 * Create the distribution stage folder i.e. creates a folder containing everything
 * have to be included in the distribution package
 */

task stage( type: Copy ) {
    dependsOn jar, javadoc, groovydoc

    // clean the target directory before create
    def target = file("$buildDir/stage/nextflow-$version")
    target.parentFile.deleteDir()
    target.mkdirs()

    destinationDir target

    // copy the launch script
    into('.') {
        from ('./nextflow.sh') // { exclude 'nextflow' }
        //rename { String fileName -> fileName.replace('nextflow.sh', 'nextflow') }
    }

    // copy application - and - runtime dependencies jars
    into('libs') {
        from "$buildDir/libs/nextflow-${version}.jar"
        from configurations.runtime
    }

    // still some stuff
    into('src') { from './src/main' }
    into('docs') { from '$buildDir/docs/groovydoc/'}

}

/*
 * Creates the Zip distribution file
 */
task distZip(type: Zip) {
    dependsOn stage
    from "$buildDir/stage/"
}

/*
 * creates the Tar distribution file
 */
task distTar(type: Tar) {
    dependsOn stage
    compression = Compression.GZIP
    from "$buildDir/stage/"
}


task dist() {
    dependsOn distZip, distTar
}

/*
 * Print the distribution file name when distXxx task completes
 */
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task == distTar && !state.failure) { println "\n** TAR: ${relativePath(distTar.archivePath)}\n\n"}
    if (task == distZip && !state.failure) { println "\n** ZIP: ${relativePath(distZip.archivePath)}\n\n"}
}

/*
 * Create a self-contained executable package
 */

def oneJarShellStub = "./one-jar/launcher.stub"
def oneJarLibPath = "./one-jar/one-jar-ant-task-0.97.jar"
def oneJarTempPath = "$buildDir/tmp/nextflow-${version}.run.jar"
def oneJarDistPath = "$buildDir/pack/nextflow"

task pack(dependsOn: compile) << {

    def appMainClass = 'nextflow.script.CliRunner'

    ant.taskdef (
            name:"one-jar",
            classname:"com.simontuffs.onejar.ant.OneJarTask",
            classpath: oneJarLibPath,
            onerror: "report"
    )

    ant.delete( dir: oneJarTempPath )
    ant."one-jar"( destfile: oneJarTempPath ) {
        delegate.manifest {
            attribute( name: 'One-Jar-Main-Class', value: appMainClass )
            attribute( name: 'One-Jar-URL-Factory', value: "com.simontuffs.onejar.JarClassLoader\$OneJarURLFactory" )
        }

        delegate.main {
            fileset( dir: "$buildDir/classes/main" )
            fileset( dir: "$buildDir/resources/main" )
        }

        lib {
            fileset dir: "$buildDir/dependency-libs"
        }
    }


    /*
     * Create the bash startup file
     */

    def distFile = new File(oneJarDistPath).absoluteFile
    if( !distFile.getParentFile().exists() ) { distFile.getParentFile().mkdirs()  }
    if( distFile.exists() ) distFile.delete()

    def out = new FileOutputStream(oneJarDistPath);
    out << new FileInputStream(oneJarShellStub)
    out << new FileInputStream(oneJarTempPath)

    "chmod +x ${distFile}".execute()

    // copy also the plain jar
    ant.echo( "Nextflow executable created. Launch with: '$oneJarDistPath'" )
    ant.echo( "Done" );

}

/*
 * private task - create the executable package and upload it to Dropbox
 */
task uploadOnejar ( type: Copy, dependsOn: pack ) {
    dependsOn pack

    from oneJarDistPath
    into '/Users/pditommaso/Dropbox/Public/nextflow/'

}

